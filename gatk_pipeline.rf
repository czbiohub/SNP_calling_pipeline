/* Reflow workflow for finding chimeric pairs. Adapted from fusionPipeline.sh written by
   Lincoln Harris. Should be run after s3_crawler.py to populate the source directory.

   author: Gerry Meixiong, CZ Biohub
   date: 8.1.18
 */

param (
	input_bam file
	sample_id string
	output_vcf file
	genome = "hg38"
	threads = 4
)

val dirs = make("$/dirs")
val strings = make("$/strings")
val pair_script = file("./findChimericReads.py")
val gatk = "quay.io/biocontainers/gatk:3.8--5"

// our first function!!
func AddOrReplaceReadGroups(sorted_bam file) file =
	exec(image := "quay.io/biocontainers/gatk:3.8--5") (output file) {"
		gatk AddOrReplaceReadGroups -I {{sorted_bam}} -O {{output}} -RGID 4 -RGLB lib1 -RGPL illumina -RGPU unit1 -RGSM 20
	"}

func Decompress(tgz file) = 
	exec(image := gatk) (output dir) {"
		tar xzvf -C {{output}} {{tgz}}
"}

// Samtools function 
func SamtoolsIndex(group_bam file) file =
	exec(image := gatk) (output file) {"
		samtools index {{group_bam}} {{output}}
	"}

// GATK Haplotype caller function 
func HaplotypeCaller(group_bam, group_bai, genome_fasta file, sample_id string) file = {

	d = dirs.Make([sample_id + ".bam": group_bam, 
		sample_id + ".bai": group_bai])

	exec(image := gatk, threads := threads) (output file) {"
		gatk HaplotypeCaller -R {{genome_fasta}} -O {{output}} \
			-I {{d}}/{{sample_id}}.bam \
				--disable-read-filter MappingQualityReadFilter \
				--disable-read-filter GoodCigarReadFilter \
				--disable-read-filter NotSecondaryAlignmentReadFilter \
				--disable-read-filter MappedReadFilter \
				--disable-read-filter MappingQualityAvailableReadFilter \
				--disable-read-filter NonZeroReferenceLengthAlignmentReadFilter \
				--disable-read-filter NotDuplicateReadFilter \
				--disable-read-filter PassesVendorQualityCheckReadFilter \
				--disable-read-filter WellformedReadFilter \
				--native-pair-hmm-threads {{threads}}
	"}
}

val genome_tar = file("s3://czi-hca/ref-genome/" + 
	genome + "-plus.tgz")
val genome_decompressed = Decompress(genome_tar)
val (genome_fasta, _) = dirs.Pick(genome_decompressed, 
	genome + "*.fa")

group_bam := AddOrReplaceReadGroups(input_bam)
group_bai := SamtoolsIndex(group_bam)
vcf := HaplotypeCaller(group_bam, group_bai, genome_fasta, sample_id)


// whats going on here? 
@requires(cpu := 1, mem := 64*GiB, disk := 200*GiB)
val Main = files.Copy(vcf, output_vcf)

