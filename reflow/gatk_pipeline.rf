////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// script: gatk_pipeline.rf
// authors: Olga Botvinnik & Lincoln Harris
// date: 10.3.18
// 
// This script implements my existing GATK SNP/indel calling pipeline in Reflow
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////


// command line params
param (
	// s3 path to aligned bam file
	input_bam string
	// cell ID
	sample_id string
	// output file name
	output_vcf string
	// genome file to use...defualt is set to HG38
	genome = "hg38"
	// how many threads to execute HaplotypeCaller with
	threads = 16
)

// Declare GLOBAL variables
val files = make("$/files")
val dirs = make("$/dirs")
val strings = make("$/strings")
val gatk = "broadinstitute/gatk"
val genome_suffix = "-plus"

// Decompress()
//		Untar the HG38 tarball
func Decompress(tgz file) = 
	exec(image := gatk, cpu := threads, mem := 8*GiB) (output dir) {"
		tar xvf {{tgz}} -C {{output}}
	"}

// SamtoolsFastaIndex()
//		Index the HG38 genome fasta
func SamtoolsFastaIndex(fasta file) file = {
	// softlink 
	output := exec(image := gatk, cpu := threads, mem := 8*GiB) (output dir) {"
		ln -s {{fasta}} {{output}}/{{genome}}.fa
		samtools faidx {{output}}/{{genome}}.fa
	"}

	val (index, _) = dirs.Pick(output, "*fai")

	index // return statement
}

// MakeGenomeDictionary()
//		Make dictionary file from HG38 genome fasta
func MakeGenomeDictionary(genome_fasta file) file = {

	d := dirs.Make([genome + ".fa": genome_fasta])

	output := exec(image := gatk, cpu := threads, mem := 8*GiB) (output file) {"
		gatk CreateSequenceDictionary --REFERENCE {{d}}/{{genome}}.fa --OUTPUT {{output}}
	"}

	output
}

// AddOrReplaceReadGroups()
//		For some reason our bams dont all have the same 'read group'...this fixes that problem
func AddOrReplaceReadGroups(sorted_bam file) file =
	exec(image := gatk, cpu := threads, mem := 8*GiB) (output file) {"
		gatk AddOrReplaceReadGroups -I {{sorted_bam}} -O {{output}} -RGID 4 -RGLB lib1 -RGPL illumina -RGPU unit1 -RGSM 20
	"}

// SamtoolsIndex()
//		Index the newly minted bam file
func SamtoolsIndex(group_bam file) file =
	exec(image := gatk, cpu := threads, mem := 8*GiB) (output file) {"
		samtools index {{group_bam}} {{output}}
	"}

// HaplotypeCaller()
//		Run GATK HaplotypeCaller function 
func HaplotypeCaller(group_bam, group_bai, genome_fasta, genome_fai, genome_dictionary file, sample_id string) file = {

	d := dirs.Make([sample_id + ".bam": group_bam, 
		sample_id + ".bai": group_bai, 
		genome + ".fa.fai": genome_fai,
		genome + ".fa": genome_fasta,
		genome + ".dict": genome_dictionary])

	exec(image := gatk, cpu := threads, mem := 8*GiB) (output file) {"
		gatk HaplotypeCaller -R {{d}}/{{genome}}.fa -O {{output}} \
			-I {{d}}/{{sample_id}}.bam \
				--disable-read-filter MappingQualityReadFilter \
				--disable-read-filter GoodCigarReadFilter \
				--disable-read-filter NotSecondaryAlignmentReadFilter \
				--disable-read-filter MappedReadFilter \
				--disable-read-filter MappingQualityAvailableReadFilter \
				--disable-read-filter NonZeroReferenceLengthAlignmentReadFilter \
				--disable-read-filter NotDuplicateReadFilter \
				--disable-read-filter PassesVendorQualityCheckReadFilter \
				--disable-read-filter WellformedReadFilter \
				--native-pair-hmm-threads {{threads}}
	"}
}

val genome_tar = file("s3://czi-hca/ref-genome/" + genome + genome_suffix + ".tgz")
val genome_decompressed = Decompress(genome_tar)
val (genome_fasta, _) = dirs.Pick(genome_decompressed, genome + genome_suffix + "/" + genome + "*.fa")
val genome_fai = SamtoolsFastaIndex(genome_fasta)
val genome_dictionary = MakeGenomeDictionary(genome_fasta)
val bam = file(input_bam) // initialized as a string, need to convert to file

group_bam := AddOrReplaceReadGroups(bam)
group_bai := SamtoolsIndex(group_bam)
vcf := HaplotypeCaller(group_bam, group_bai, genome_fasta, genome_fai, genome_dictionary, sample_id)


// Main()
@requires(cpu := 1)
val Main = files.Copy(vcf, output_vcf)

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
