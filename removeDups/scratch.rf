////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// script: scratch.rf
// authors: Lincoln Harris
// date: 1.23.18
// 
// scratchpad here...trying out picard tools
//
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

// command line params
param (
	// s3 path to aligned bam file
	input_bam string
	// cell ID
	sample_id string
	// output file name
	output_file string
	// how many threads to execute HaplotypeCaller with
	threads = 16
)

// Declare GLOBAL variables
val files = make("$/files")
val dirs = make("$/dirs")
val strings = make("$/strings")
val picard = "broadinstitute/picard"


// template func
//
//func Decompress(tgz file) = 
//	exec(image := gatk, cpu := threads, mem := 8*GiB) (output dir) {"
//		tar xvf {{tgz}} -C {{output}}
//	"}


// template func
//
//func HaplotypeCaller(group_bam, group_bai, genome_fasta, genome_fai, genome_dictionary file, sample_id string, dbSNP file, dbSNP_idx file) file = {
//
//	d := dirs.Make([sample_id + ".bam": group_bam, 
//		sample_id + ".bai": group_bai, 
//		genome + ".fa.fai": genome_fai,
//		genome + ".fa": genome_fasta,
//		genome + ".dict": genome_dictionary, 
//		genome + ".vcf": dbSNP, 
//		genome + ".vcf.idx": dbSNP_idx])
//
//	exec(image := gatk, cpu := threads, mem := 8*GiB) (output file) {"
//		gatk HaplotypeCaller -R {{d}}/{{genome}}.fa -O {{output}} \
//			-I {{d}}/{{sample_id}}.bam \
//				--native-pair-hmm-threads {{threads}} \
//				--dbsnp {{d}}/{{genome}}.vcf
//	"}
//}


// MarkDuplicates()
//		Run picard MarkDuplicates function 
func MarkDuplicates(bam file, sample_id string) file = {

	d := dirs.Make([sample_id + ".bam": bam])

	exec(image := picard, cpu := threads, mem := 8*GiB) (output file) {"
		cd /usr/picard
		java -jar picard.jar MarkDuplicates I={{d}}/{{sample_id}}.bam O={{output}} \
			M={{sample_id}}_marked_dup_metrics.txt
	"}
}

val bam = file(input_bam) // initialized as a string, need to convert to file
//val out_dir = dir(output_dir) // initialized as a string, need to convert to dir

picard_out := MarkDuplicates(bam, sample_id)
//val (return_bam, _) = dirs.Pick(picard_out, sample_id + "_marked_dups.bam")

// Main()
@requires(cpu := 1)
val Main = files.Copy(picard_out, output_file)

////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//
// picard MarkDuplicates I={{d}}/{{sample_id}}.bam O={{sample_id}}_marked_dups.bam \
//			M={{sample_id}}_marked_dup_metrics.txt
//